package com.hsfcompany.tzcs.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;



// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table USER_INFO.
*/
public class UserInfoDao extends AbstractDao<UserInfo, Long> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Nickname = new Property(1, String.class, "nickname", false, "NICKNAME");
        public final static Property Sex = new Property(2, String.class, "sex", false, "SEX");
        public final static Property Ctime = new Property(3, String.class, "ctime", false, "CTIME");
        public final static Property Tanshizhi = new Property(4, Integer.class, "tanshizhi", false, "TANSHIZHI");
        public final static Property Yangxuzhi = new Property(5, Integer.class, "yangxuzhi", false, "YANGXUZHI");
        public final static Property Yinxuzhi = new Property(6, Integer.class, "yinxuzhi", false, "YINXUZHI");
        public final static Property Qiyuzhi = new Property(7, Integer.class, "qiyuzhi", false, "QIYUZHI");
        public final static Property Shirezhi = new Property(8, Integer.class, "shirezhi", false, "SHIREZHI");
        public final static Property Qixuzhi = new Property(9, Integer.class, "qixuzhi", false, "QIXUZHI");
        public final static Property Xueyuzhi = new Property(10, Integer.class, "xueyuzhi", false, "XUEYUZHI");
        public final static Property Tebingzhi = new Property(11, Integer.class, "tebingzhi", false, "TEBINGZHI");
    };


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER_INFO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NICKNAME' TEXT," + // 1: nickname
                "'SEX' TEXT," + // 2: sex
                "'CTIME' TEXT," + // 3: ctime
                "'TANSHIZHI' INTEGER," + // 4: tanshizhi
                "'YANGXUZHI' INTEGER," + // 5: yangxuzhi
                "'YINXUZHI' INTEGER," + // 6: yinxuzhi
                "'QIYUZHI' INTEGER," + // 7: qiyuzhi
                "'SHIREZHI' INTEGER," + // 8: shirezhi
                "'QIXUZHI' INTEGER," + // 9: qixuzhi
                "'XUEYUZHI' INTEGER," + // 10: xueyuzhi
                "'TEBINGZHI' INTEGER);"); // 11: tebingzhi
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(2, nickname);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(3, sex);
        }

        String ctime = entity.getCtime();
        if (ctime != null) {
            stmt.bindString(4, ctime);
        }
 
        Integer tanshizhi = entity.getTanshizhi();
        if (tanshizhi != null) {
            stmt.bindLong(5, tanshizhi);
        }
 
        Integer yangxuzhi = entity.getYangxuzhi();
        if (yangxuzhi != null) {
            stmt.bindLong(6, yangxuzhi);
        }
 
        Integer yinxuzhi = entity.getYinxuzhi();
        if (yinxuzhi != null) {
            stmt.bindLong(7, yinxuzhi);
        }
 
        Integer qiyuzhi = entity.getQiyuzhi();
        if (qiyuzhi != null) {
            stmt.bindLong(8, qiyuzhi);
        }
 
        Integer shirezhi = entity.getShirezhi();
        if (shirezhi != null) {
            stmt.bindLong(9, shirezhi);
        }
 
        Integer qixuzhi = entity.getQixuzhi();
        if (qixuzhi != null) {
            stmt.bindLong(10, qixuzhi);
        }
 
        Integer xueyuzhi = entity.getXueyuzhi();
        if (xueyuzhi != null) {
            stmt.bindLong(11, xueyuzhi);
        }
 
        Integer tebingzhi = entity.getTebingzhi();
        if (tebingzhi != null) {
            stmt.bindLong(12, tebingzhi);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nickname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sex
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ctime
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // tanshizhi
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // yangxuzhi
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // yinxuzhi
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // qiyuzhi
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // shirezhi
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // qixuzhi
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // xueyuzhi
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11) // tebingzhi
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNickname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSex(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCtime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTanshizhi(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setYangxuzhi(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setYinxuzhi(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setQiyuzhi(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setShirezhi(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setQixuzhi(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setXueyuzhi(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setTebingzhi(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UserInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UserInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
