package com.lcc.db.test;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER_INFO.
*/
public class UserInfoDao extends AbstractDao<UserInfo, Long> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Phone = new Property(1, String.class, "phone", false, "PHONE");
        public final static Property Nickname = new Property(2, String.class, "nickname", false, "NICKNAME");
        public final static Property Xb = new Property(3, String.class, "xb", false, "XB");
        public final static Property Email = new Property(4, String.class, "email", false, "EMAIL");
        public final static Property Created_at = new Property(5, String.class, "created_at", false, "CREATED_AT");
        public final static Property Jf = new Property(6, String.class, "jf", false, "JF");
        public final static Property Qm = new Property(7, String.class, "qm", false, "QM");
        public final static Property Zy = new Property(8, String.class, "zy", false, "ZY");
        public final static Property User_image = new Property(9, String.class, "user_image", false, "USER_IMAGE");
        public final static Property Gz_num = new Property(10, String.class, "gz_num", false, "GZ_NUM");
        public final static Property Fs_num = new Property(11, String.class, "fs_num", false, "FS_NUM");
    };


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER_INFO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'PHONE' TEXT," + // 1: phone
                "'NICKNAME' TEXT," + // 2: nickname
                "'XB' TEXT," + // 3: xb
                "'EMAIL' TEXT," + // 4: email
                "'CREATED_AT' TEXT," + // 5: created_at
                "'JF' TEXT," + // 6: if
                "'QM' TEXT," + // 7: qm
                "'ZY' TEXT," + // 8: zy
                "'USER_IMAGE' TEXT," + // 8: zy
                "'GZ_NUM' TEXT," + // 8: zy
                "'FS_NUM' TEXT);"); // 9: user_image
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER_INFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(2, phone);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(3, nickname);
        }
 
        String xb = entity.getXb();
        if (xb != null) {
            stmt.bindString(4, xb);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(5, email);
        }
 
        String created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindString(6, created_at);
        }
 
        String jf = entity.getJf();
        if (jf != null) {
            stmt.bindString(7, jf);
        }
 
        String qm = entity.getQm();
        if (qm != null) {
            stmt.bindString(8, qm);
        }
 
        String zy = entity.getZy();
        if (zy != null) {
            stmt.bindString(9, zy);
        }
 
        String user_image = entity.getUser_image();
        if (user_image != null) {
            stmt.bindString(10, user_image);
        }

        String gz_num = entity.getGz_num();
        if (gz_num != null) {
            stmt.bindString(11, gz_num);
        }

        String fs_num = entity.getFs_num();
        if (fs_num != null) {
            stmt.bindString(12, fs_num);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // phone
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nickname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // xb
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // email
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // created_at
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // if
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // qm
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // zy
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // user_image
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // user_image
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // user_image
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPhone(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNickname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setXb(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEmail(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreated_at(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setJf(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setQm(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setZy(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUser_image(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setGz_num(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFs_num(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UserInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UserInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
