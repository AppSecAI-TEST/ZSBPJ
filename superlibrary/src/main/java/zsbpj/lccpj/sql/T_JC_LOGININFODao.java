package zsbpj.lccpj.sql;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table T__JC__LOGININFO.
*/
public class T_JC_LOGININFODao extends AbstractDao<T_JC_LOGININFO, Long> {

    public static final String TABLENAME = "T__JC__LOGININFO";

    /**
     * Properties of entity T_JC_LOGININFO.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Ids = new Property(0, Long.class, "ids", true, "_ids");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property Un = new Property(2, String.class, "un", false, "UN");
        public final static Property Ui = new Property(3, String.class, "ui", false, "UI");
        public final static Property Dc = new Property(4, String.class, "dc", false, "DC");
        public final static Property Dd = new Property(5, String.class, "dd", false, "DD");
        public final static Property Uf = new Property(6, String.class, "uf", false, "UF");
        public final static Property Url = new Property(7, String.class, "url", false, "URL");
    };


    public T_JC_LOGININFODao(DaoConfig config) {
        super(config);
    }
    
    public T_JC_LOGININFODao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'T__JC__LOGININFO' (" + //
                "'_ids' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'ID' TEXT," + // 1: id
                "'UN' TEXT," + // 2: un
                "'UI' TEXT," + // 3: ui
                "'DC' TEXT," + // 4: dc
                "'DD' TEXT," + // 5: dd
                "'UF' TEXT," + // 6: uf
                "'URL' TEXT);"); // 7: url
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'T__JC__LOGININFO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, T_JC_LOGININFO entity) {
        stmt.clearBindings();
 
        Long ids = entity.getIds();
        if (ids != null) {
            stmt.bindLong(1, ids);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String un = entity.getUn();
        if (un != null) {
            stmt.bindString(3, un);
        }
 
        String ui = entity.getUi();
        if (ui != null) {
            stmt.bindString(4, ui);
        }
 
        String dc = entity.getDc();
        if (dc != null) {
            stmt.bindString(5, dc);
        }
 
        String dd = entity.getDd();
        if (dd != null) {
            stmt.bindString(6, dd);
        }
 
        String uf = entity.getUf();
        if (uf != null) {
            stmt.bindString(7, uf);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(8, url);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public T_JC_LOGININFO readEntity(Cursor cursor, int offset) {
        T_JC_LOGININFO entity = new T_JC_LOGININFO( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ids
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // un
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ui
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // dc
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // dd
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // uf
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // url
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, T_JC_LOGININFO entity, int offset) {
        entity.setIds(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUn(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUi(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDc(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDd(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUf(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(T_JC_LOGININFO entity, long rowId) {
        entity.setIds(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(T_JC_LOGININFO entity) {
        if(entity != null) {
            return entity.getIds();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
